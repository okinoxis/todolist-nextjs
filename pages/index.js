import Head from 'next/head'
import { useState } from 'react'

export async function getServerSideProps() {
  const res = await fetch(`http://127.0.0.1:8000/api/v1/tasks/`)
  const tasks = await res.json()
  return { props: { tasks } }
}

export default function Home({tasks}) {

  const [todos, setTodos] = useState(tasks)
  const [text, setText] = useState()
  const [edit, setEdit] = useState()
  const [editText, setEditText] = useState()

  async function handleCreateToDo(e) {
    e.preventDefault();
    const res = await fetch(`http://127.0.0.1:8000/api/v1/tasks/create`, {
      method: "POST",
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        text: text,
      })
    })
    const data = await res.json();

    if (res.ok) {
      const copy = [...todos]
      copy.splice(data._id, 0, data)
      setTodos(copy)
      setText("")
    }
  }

  async function handleDeleteToDo(id) {
    const res = await fetch(`http://127.0.0.1:8000/api/v1/tasks/delete/${id}`, {
      method: "DELETE",
      headers: {
        'Content-Type': 'application/json'
      }
    })
    if (res.ok) {
      const idx = todos.findIndex((todo) => todo._id === id)
      const copy = [...todos]
      copy.splice(idx, 1)
      setTodos(copy)
    }
  }

  async function handleCompleteToDo(id, text, completed) {
    const res = await fetch(`http://127.0.0.1:8000/api/v1/tasks/update/${id}`, {
      method: "PUT",
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        text: text,
        completed: !completed,
      })
    })
    const data = await res.json();
    if (res.ok) {
      const idx = todos.findIndex((todo) => todo._id === id)
      const copy = [...todos]
      copy.splice(idx, 1, data)
      setTodos(copy)
    }
  }

  async function handleEditToDo(e) {
    e.preventDefault()
    const res = await fetch(`http://127.0.0.1:8000/api/v1/tasks/update/${edit}`, {
      method: "PUT",
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        text: editText,
        completed: false,
      })
    })
    const data = await res.json();
    if (res.ok) {
      const idx = todos.findIndex((todo) => todo._id === edit)
      const copy = [...todos]
      copy.splice(idx, 1, data)
      setEdit("")
      setTodos(copy)
    }
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container px-5 py-24 mx-auto">
        <div className="flex flex-col w-full mb-8">
          <form method="post" onSubmit={handleCreateToDo}>
            <textarea
              value={text}
              onChange={(e) => setText(e.target.value)}
              placeholder="What you have to do?"
              className="w-full text-xl resize-none outline-none h-12 bg-gray-800 p-2"
            ></textarea>
            <button type='submit' className="inline px-4 py-3 my-2 rounded-lg font-bold text-white bg-indigo-500">
              Post
            </button>
          </form>
        </div>
        {todos.map((todo, index) => 
        <section key={index} className="flex justify-between mb-4 p-2 bg-gray-800 rounded-lg hover:bg-gray-700">
          {edit===todo._id ? 
            <form className='font-medium w-full p-2' method="post" onSubmit={handleEditToDo}>
              <div className='flex justify-center'>
                <textarea
                defaultValue={todo.text}
                onChange={(e) => setEditText(e.target.value)}
                placeholder={todo.text}
                className="w-full text-xl resize-none outline-none h-11 bg-gray-800 p-2"
                ></textarea>
                <button type='submit' className="inline px-4 py-2 mx-2 rounded-lg font-bold text-white bg-indigo-500">
                  Edit
                </button>
              </div>
            </form>
            :
            <div className='font-medium text-lg p-4'>
              <p className={todo.completed ? "text-red-500" : undefined}>
                {todo.text}
              </p>
            </div>
          }
          <div className='flex items-center font-thin text-sm'>
            {edit===todo._id ? 
              <button className='p-2' onClick={() => setEdit("")}>
                cancel
              </button>
            :
              <button className='p-2' onClick={() => setEdit(todo._id)}>
                edit
              </button>
            }
            <button className='p-2' onClick={() => handleDeleteToDo(todo._id)}>
              delete
            </button>
            <button className='p-2' onClick={() => handleCompleteToDo(todo._id, todo.text, todo.completed)}>
              complete
            </button>
          </div>
        </section>
        )}

      </main>

    </div>
  )
}
